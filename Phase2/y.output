Terminals unused in grammar

    AND
    OR


State 78 conflicts: 4 shift/reduce


Grammar

    0 $accept: program $end

    1 program: headers main '(' ')' '{' bodies return_stmt '}'

    2 headers: headers INCLUDE
    3        | INCLUDE

    4 main: datatype ID

    5 datatype: INT
    6         | FLOAT
    7         | CHAR
    8         | VOID

    9 bodies: body
   10       | bodies body

   11 body: FOR '(' statement ';' condition ';' statement ')' '{' bodies '}'
   12     | IF '(' condition ')' '{' bodies '}'
   13     | IF '(' condition ')' '{' bodies '}' ELSE '{' bodies '}'
   14     | statement ';'
   15     | PRINTFF '(' STR ')' ';'
   16     | SCANFF '(' STR ',' '&' ID ')' ';'

   17 condition: value relop value
   18          | TRUE
   19          | FALSE

   20 statement: datatype ID init
   21          | ID '=' expression
   22          | ID UNARY
   23          | UNARY ID

   24 init: '=' value
   25     | ε

   26 expression: expression arithmetic expression
   27           | value

   28 arithmetic: ADD
   29           | SUBTRACT
   30           | MULTIPLY
   31           | DIVIDE

   32 relop: LT
   33      | GT
   34      | LE
   35      | GE
   36      | EQ
   37      | NE

   38 value: NUMBER
   39      | FLOAT_NUM
   40      | CHARACTER
   41      | ID

   42 return_stmt: RETURN value ';'
   43            | ε


Terminals, with rules where they appear

    $end (0) 0
    '&' (38) 16
    '(' (40) 1 11 12 13 15 16
    ')' (41) 1 11 12 13 15 16
    ',' (44) 16
    ';' (59) 11 14 15 16 42
    '=' (61) 21 24
    '{' (123) 1 11 12 13
    '}' (125) 1 11 12 13
    error (256)
    VOID (258) 8
    CHARACTER (259) 40
    PRINTFF (260) 15
    SCANFF (261) 16
    INT (262) 5
    FLOAT (263) 6
    CHAR (264) 7
    FOR (265) 11
    IF (266) 12 13
    ELSE (267) 13
    TRUE (268) 18
    FALSE (269) 19
    NUMBER (270) 38
    FLOAT_NUM (271) 39
    ID (272) 4 16 20 21 22 23 41
    LE (273) 34
    GE (274) 35
    EQ (275) 36
    NE (276) 37
    GT (277) 33
    LT (278) 32
    AND (279)
    OR (280)
    STR (281) 15 16
    ADD (282) 28
    MULTIPLY (283) 30
    DIVIDE (284) 31
    SUBTRACT (285) 29
    UNARY (286) 22 23
    INCLUDE (287) 2 3
    RETURN (288) 42
    LOWER_THAN_ELSE (289)


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    program (44)
        on left: 1
        on right: 0
    headers (45)
        on left: 2 3
        on right: 1 2
    main (46)
        on left: 4
        on right: 1
    datatype (47)
        on left: 5 6 7 8
        on right: 4 20
    bodies (48)
        on left: 9 10
        on right: 1 10 11 12 13
    body (49)
        on left: 11 12 13 14 15 16
        on right: 9 10
    condition (50)
        on left: 17 18 19
        on right: 11 12 13
    statement (51)
        on left: 20 21 22 23
        on right: 11 14
    init (52)
        on left: 24 25
        on right: 20
    expression (53)
        on left: 26 27
        on right: 21 26
    arithmetic (54)
        on left: 28 29 30 31
        on right: 26
    relop (55)
        on left: 32 33 34 35 36 37
        on right: 17
    value (56)
        on left: 38 39 40 41
        on right: 17 24 27 42
    return_stmt (57)
        on left: 42 43
        on right: 1


State 0

    0 $accept: • program $end

    INCLUDE  shift, and go to state 1

    program  go to state 2
    headers  go to state 3


State 1

    3 headers: INCLUDE •

    $default  reduce using rule 3 (headers)


State 2

    0 $accept: program • $end

    $end  shift, and go to state 4


State 3

    1 program: headers • main '(' ')' '{' bodies return_stmt '}'
    2 headers: headers • INCLUDE

    VOID     shift, and go to state 5
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    CHAR     shift, and go to state 8
    INCLUDE  shift, and go to state 9

    main      go to state 10
    datatype  go to state 11


State 4

    0 $accept: program $end •

    $default  accept


State 5

    8 datatype: VOID •

    $default  reduce using rule 8 (datatype)


State 6

    5 datatype: INT •

    $default  reduce using rule 5 (datatype)


State 7

    6 datatype: FLOAT •

    $default  reduce using rule 6 (datatype)


State 8

    7 datatype: CHAR •

    $default  reduce using rule 7 (datatype)


State 9

    2 headers: headers INCLUDE •

    $default  reduce using rule 2 (headers)


State 10

    1 program: headers main • '(' ')' '{' bodies return_stmt '}'

    '('  shift, and go to state 12


State 11

    4 main: datatype • ID

    ID  shift, and go to state 13


State 12

    1 program: headers main '(' • ')' '{' bodies return_stmt '}'

    ')'  shift, and go to state 14


State 13

    4 main: datatype ID •

    $default  reduce using rule 4 (main)


State 14

    1 program: headers main '(' ')' • '{' bodies return_stmt '}'

    '{'  shift, and go to state 15


State 15

    1 program: headers main '(' ')' '{' • bodies return_stmt '}'

    VOID     shift, and go to state 5
    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    CHAR     shift, and go to state 8
    FOR      shift, and go to state 18
    IF       shift, and go to state 19
    ID       shift, and go to state 20
    UNARY    shift, and go to state 21

    datatype   go to state 22
    bodies     go to state 23
    body       go to state 24
    statement  go to state 25


State 16

   15 body: PRINTFF • '(' STR ')' ';'

    '('  shift, and go to state 26


State 17

   16 body: SCANFF • '(' STR ',' '&' ID ')' ';'

    '('  shift, and go to state 27


State 18

   11 body: FOR • '(' statement ';' condition ';' statement ')' '{' bodies '}'

    '('  shift, and go to state 28


State 19

   12 body: IF • '(' condition ')' '{' bodies '}'
   13     | IF • '(' condition ')' '{' bodies '}' ELSE '{' bodies '}'

    '('  shift, and go to state 29


State 20

   21 statement: ID • '=' expression
   22          | ID • UNARY

    UNARY  shift, and go to state 30
    '='    shift, and go to state 31


State 21

   23 statement: UNARY • ID

    ID  shift, and go to state 32


State 22

   20 statement: datatype • ID init

    ID  shift, and go to state 33


State 23

    1 program: headers main '(' ')' '{' bodies • return_stmt '}'
   10 bodies: bodies • body

    VOID     shift, and go to state 5
    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    CHAR     shift, and go to state 8
    FOR      shift, and go to state 18
    IF       shift, and go to state 19
    ID       shift, and go to state 20
    UNARY    shift, and go to state 21
    RETURN   shift, and go to state 34

    $default  reduce using rule 43 (return_stmt)

    datatype     go to state 22
    body         go to state 35
    statement    go to state 25
    return_stmt  go to state 36


State 24

    9 bodies: body •

    $default  reduce using rule 9 (bodies)


State 25

   14 body: statement • ';'

    ';'  shift, and go to state 37


State 26

   15 body: PRINTFF '(' • STR ')' ';'

    STR  shift, and go to state 38


State 27

   16 body: SCANFF '(' • STR ',' '&' ID ')' ';'

    STR  shift, and go to state 39


State 28

   11 body: FOR '(' • statement ';' condition ';' statement ')' '{' bodies '}'

    VOID   shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7
    CHAR   shift, and go to state 8
    ID     shift, and go to state 20
    UNARY  shift, and go to state 21

    datatype   go to state 22
    statement  go to state 40


State 29

   12 body: IF '(' • condition ')' '{' bodies '}'
   13     | IF '(' • condition ')' '{' bodies '}' ELSE '{' bodies '}'

    CHARACTER  shift, and go to state 41
    TRUE       shift, and go to state 42
    FALSE      shift, and go to state 43
    NUMBER     shift, and go to state 44
    FLOAT_NUM  shift, and go to state 45
    ID         shift, and go to state 46

    condition  go to state 47
    value      go to state 48


State 30

   22 statement: ID UNARY •

    $default  reduce using rule 22 (statement)


State 31

   21 statement: ID '=' • expression

    CHARACTER  shift, and go to state 41
    NUMBER     shift, and go to state 44
    FLOAT_NUM  shift, and go to state 45
    ID         shift, and go to state 46

    expression  go to state 49
    value       go to state 50


State 32

   23 statement: UNARY ID •

    $default  reduce using rule 23 (statement)


State 33

   20 statement: datatype ID • init

    '='  shift, and go to state 51

    $default  reduce using rule 25 (init)

    init  go to state 52


State 34

   42 return_stmt: RETURN • value ';'

    CHARACTER  shift, and go to state 41
    NUMBER     shift, and go to state 44
    FLOAT_NUM  shift, and go to state 45
    ID         shift, and go to state 46

    value  go to state 53


State 35

   10 bodies: bodies body •

    $default  reduce using rule 10 (bodies)


State 36

    1 program: headers main '(' ')' '{' bodies return_stmt • '}'

    '}'  shift, and go to state 54


State 37

   14 body: statement ';' •

    $default  reduce using rule 14 (body)


State 38

   15 body: PRINTFF '(' STR • ')' ';'

    ')'  shift, and go to state 55


State 39

   16 body: SCANFF '(' STR • ',' '&' ID ')' ';'

    ','  shift, and go to state 56


State 40

   11 body: FOR '(' statement • ';' condition ';' statement ')' '{' bodies '}'

    ';'  shift, and go to state 57


State 41

   40 value: CHARACTER •

    $default  reduce using rule 40 (value)


State 42

   18 condition: TRUE •

    $default  reduce using rule 18 (condition)


State 43

   19 condition: FALSE •

    $default  reduce using rule 19 (condition)


State 44

   38 value: NUMBER •

    $default  reduce using rule 38 (value)


State 45

   39 value: FLOAT_NUM •

    $default  reduce using rule 39 (value)


State 46

   41 value: ID •

    $default  reduce using rule 41 (value)


State 47

   12 body: IF '(' condition • ')' '{' bodies '}'
   13     | IF '(' condition • ')' '{' bodies '}' ELSE '{' bodies '}'

    ')'  shift, and go to state 58


State 48

   17 condition: value • relop value

    LE  shift, and go to state 59
    GE  shift, and go to state 60
    EQ  shift, and go to state 61
    NE  shift, and go to state 62
    GT  shift, and go to state 63
    LT  shift, and go to state 64

    relop  go to state 65


State 49

   21 statement: ID '=' expression •
   26 expression: expression • arithmetic expression

    ADD       shift, and go to state 66
    MULTIPLY  shift, and go to state 67
    DIVIDE    shift, and go to state 68
    SUBTRACT  shift, and go to state 69

    $default  reduce using rule 21 (statement)

    arithmetic  go to state 70


State 50

   27 expression: value •

    $default  reduce using rule 27 (expression)


State 51

   24 init: '=' • value

    CHARACTER  shift, and go to state 41
    NUMBER     shift, and go to state 44
    FLOAT_NUM  shift, and go to state 45
    ID         shift, and go to state 46

    value  go to state 71


State 52

   20 statement: datatype ID init •

    $default  reduce using rule 20 (statement)


State 53

   42 return_stmt: RETURN value • ';'

    ';'  shift, and go to state 72


State 54

    1 program: headers main '(' ')' '{' bodies return_stmt '}' •

    $default  reduce using rule 1 (program)


State 55

   15 body: PRINTFF '(' STR ')' • ';'

    ';'  shift, and go to state 73


State 56

   16 body: SCANFF '(' STR ',' • '&' ID ')' ';'

    '&'  shift, and go to state 74


State 57

   11 body: FOR '(' statement ';' • condition ';' statement ')' '{' bodies '}'

    CHARACTER  shift, and go to state 41
    TRUE       shift, and go to state 42
    FALSE      shift, and go to state 43
    NUMBER     shift, and go to state 44
    FLOAT_NUM  shift, and go to state 45
    ID         shift, and go to state 46

    condition  go to state 75
    value      go to state 48


State 58

   12 body: IF '(' condition ')' • '{' bodies '}'
   13     | IF '(' condition ')' • '{' bodies '}' ELSE '{' bodies '}'

    '{'  shift, and go to state 76


State 59

   34 relop: LE •

    $default  reduce using rule 34 (relop)


State 60

   35 relop: GE •

    $default  reduce using rule 35 (relop)


State 61

   36 relop: EQ •

    $default  reduce using rule 36 (relop)


State 62

   37 relop: NE •

    $default  reduce using rule 37 (relop)


State 63

   33 relop: GT •

    $default  reduce using rule 33 (relop)


State 64

   32 relop: LT •

    $default  reduce using rule 32 (relop)


State 65

   17 condition: value relop • value

    CHARACTER  shift, and go to state 41
    NUMBER     shift, and go to state 44
    FLOAT_NUM  shift, and go to state 45
    ID         shift, and go to state 46

    value  go to state 77


State 66

   28 arithmetic: ADD •

    $default  reduce using rule 28 (arithmetic)


State 67

   30 arithmetic: MULTIPLY •

    $default  reduce using rule 30 (arithmetic)


State 68

   31 arithmetic: DIVIDE •

    $default  reduce using rule 31 (arithmetic)


State 69

   29 arithmetic: SUBTRACT •

    $default  reduce using rule 29 (arithmetic)


State 70

   26 expression: expression arithmetic • expression

    CHARACTER  shift, and go to state 41
    NUMBER     shift, and go to state 44
    FLOAT_NUM  shift, and go to state 45
    ID         shift, and go to state 46

    expression  go to state 78
    value       go to state 50


State 71

   24 init: '=' value •

    $default  reduce using rule 24 (init)


State 72

   42 return_stmt: RETURN value ';' •

    $default  reduce using rule 42 (return_stmt)


State 73

   15 body: PRINTFF '(' STR ')' ';' •

    $default  reduce using rule 15 (body)


State 74

   16 body: SCANFF '(' STR ',' '&' • ID ')' ';'

    ID  shift, and go to state 79


State 75

   11 body: FOR '(' statement ';' condition • ';' statement ')' '{' bodies '}'

    ';'  shift, and go to state 80


State 76

   12 body: IF '(' condition ')' '{' • bodies '}'
   13     | IF '(' condition ')' '{' • bodies '}' ELSE '{' bodies '}'

    VOID     shift, and go to state 5
    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    CHAR     shift, and go to state 8
    FOR      shift, and go to state 18
    IF       shift, and go to state 19
    ID       shift, and go to state 20
    UNARY    shift, and go to state 21

    datatype   go to state 22
    bodies     go to state 81
    body       go to state 24
    statement  go to state 25


State 77

   17 condition: value relop value •

    $default  reduce using rule 17 (condition)


State 78

   26 expression: expression • arithmetic expression
   26           | expression arithmetic expression •

    ADD       shift, and go to state 66
    MULTIPLY  shift, and go to state 67
    DIVIDE    shift, and go to state 68
    SUBTRACT  shift, and go to state 69

    ADD       [reduce using rule 26 (expression)]
    MULTIPLY  [reduce using rule 26 (expression)]
    DIVIDE    [reduce using rule 26 (expression)]
    SUBTRACT  [reduce using rule 26 (expression)]
    $default  reduce using rule 26 (expression)

    arithmetic  go to state 70


State 79

   16 body: SCANFF '(' STR ',' '&' ID • ')' ';'

    ')'  shift, and go to state 82


State 80

   11 body: FOR '(' statement ';' condition ';' • statement ')' '{' bodies '}'

    VOID   shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7
    CHAR   shift, and go to state 8
    ID     shift, and go to state 20
    UNARY  shift, and go to state 21

    datatype   go to state 22
    statement  go to state 83


State 81

   10 bodies: bodies • body
   12 body: IF '(' condition ')' '{' bodies • '}'
   13     | IF '(' condition ')' '{' bodies • '}' ELSE '{' bodies '}'

    VOID     shift, and go to state 5
    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    CHAR     shift, and go to state 8
    FOR      shift, and go to state 18
    IF       shift, and go to state 19
    ID       shift, and go to state 20
    UNARY    shift, and go to state 21
    '}'      shift, and go to state 84

    datatype   go to state 22
    body       go to state 35
    statement  go to state 25


State 82

   16 body: SCANFF '(' STR ',' '&' ID ')' • ';'

    ';'  shift, and go to state 85


State 83

   11 body: FOR '(' statement ';' condition ';' statement • ')' '{' bodies '}'

    ')'  shift, and go to state 86


State 84

   12 body: IF '(' condition ')' '{' bodies '}' •
   13     | IF '(' condition ')' '{' bodies '}' • ELSE '{' bodies '}'

    ELSE  shift, and go to state 87

    $default  reduce using rule 12 (body)


State 85

   16 body: SCANFF '(' STR ',' '&' ID ')' ';' •

    $default  reduce using rule 16 (body)


State 86

   11 body: FOR '(' statement ';' condition ';' statement ')' • '{' bodies '}'

    '{'  shift, and go to state 88


State 87

   13 body: IF '(' condition ')' '{' bodies '}' ELSE • '{' bodies '}'

    '{'  shift, and go to state 89


State 88

   11 body: FOR '(' statement ';' condition ';' statement ')' '{' • bodies '}'

    VOID     shift, and go to state 5
    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    CHAR     shift, and go to state 8
    FOR      shift, and go to state 18
    IF       shift, and go to state 19
    ID       shift, and go to state 20
    UNARY    shift, and go to state 21

    datatype   go to state 22
    bodies     go to state 90
    body       go to state 24
    statement  go to state 25


State 89

   13 body: IF '(' condition ')' '{' bodies '}' ELSE '{' • bodies '}'

    VOID     shift, and go to state 5
    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    CHAR     shift, and go to state 8
    FOR      shift, and go to state 18
    IF       shift, and go to state 19
    ID       shift, and go to state 20
    UNARY    shift, and go to state 21

    datatype   go to state 22
    bodies     go to state 91
    body       go to state 24
    statement  go to state 25


State 90

   10 bodies: bodies • body
   11 body: FOR '(' statement ';' condition ';' statement ')' '{' bodies • '}'

    VOID     shift, and go to state 5
    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    CHAR     shift, and go to state 8
    FOR      shift, and go to state 18
    IF       shift, and go to state 19
    ID       shift, and go to state 20
    UNARY    shift, and go to state 21
    '}'      shift, and go to state 92

    datatype   go to state 22
    body       go to state 35
    statement  go to state 25


State 91

   10 bodies: bodies • body
   13 body: IF '(' condition ')' '{' bodies '}' ELSE '{' bodies • '}'

    VOID     shift, and go to state 5
    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    CHAR     shift, and go to state 8
    FOR      shift, and go to state 18
    IF       shift, and go to state 19
    ID       shift, and go to state 20
    UNARY    shift, and go to state 21
    '}'      shift, and go to state 93

    datatype   go to state 22
    body       go to state 35
    statement  go to state 25


State 92

   11 body: FOR '(' statement ';' condition ';' statement ')' '{' bodies '}' •

    $default  reduce using rule 11 (body)


State 93

   13 body: IF '(' condition ')' '{' bodies '}' ELSE '{' bodies '}' •

    $default  reduce using rule 13 (body)
